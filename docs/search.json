[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "",
    "text": "A finalidade é criar uma dashboard, com atualização automática, das notificações de síndrome gripal suspeitas de covid-19, em Pernambuco, com os dados desde 2020. Nessa dashboard, precisa constar, no mínimo, alguns indicadores: número total de notificações; média de idade das pessoas notificadas; data e hora da última notificação; número de notificações por sintomas, por condição pré-existente e por município.\nUma característica dos dados é que as notificações são de casos leves e suspeitos notificados pelo SUS, portanto, não reflete a totalidade dos casos de covid-19 nem o total de pessoas imunizadas. Outro ponto importante é que os casos de Síndrome Respiratória Aguda Grave (SRAG) não são contemplados nesta base de dados. Apesar disso, esse dataset serve como um bom parâmetro para monitorar a situação da covid-19 no estado.\nExistem duas dashboards que mostram dados de covid-19 no Brasil: uma mais estática, e outra mais interativa, mostrando até os casos diários. No entanto, além de a atualização não ser tão frequente, os dados são pouco explorados."
  },
  {
    "objectID": "index.html#objetivo",
    "href": "index.html#objetivo",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "",
    "text": "A finalidade é criar uma dashboard, com atualização automática, das notificações de síndrome gripal suspeitas de covid-19, em Pernambuco, com os dados desde 2020. Nessa dashboard, precisa constar, no mínimo, alguns indicadores: número total de notificações; média de idade das pessoas notificadas; data e hora da última notificação; número de notificações por sintomas, por condição pré-existente e por município.\nUma característica dos dados é que as notificações são de casos leves e suspeitos notificados pelo SUS, portanto, não reflete a totalidade dos casos de covid-19 nem o total de pessoas imunizadas. Outro ponto importante é que os casos de Síndrome Respiratória Aguda Grave (SRAG) não são contemplados nesta base de dados. Apesar disso, esse dataset serve como um bom parâmetro para monitorar a situação da covid-19 no estado.\nExistem duas dashboards que mostram dados de covid-19 no Brasil: uma mais estática, e outra mais interativa, mostrando até os casos diários. No entanto, além de a atualização não ser tão frequente, os dados são pouco explorados."
  },
  {
    "objectID": "index.html#carregamento-dos-pacotes",
    "href": "index.html#carregamento-dos-pacotes",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "Carregamento dos pacotes",
    "text": "Carregamento dos pacotes\n\n\nCode\n#Executar scripts do python no R\nlibrary(reticulate)\n\n#ETL dos dados\nlibrary(data.table)\nlibrary(DBI)\nlibrary(RPostgres)\nlibrary(tidyverse)\n\n#criar rotinas no R\nlibrary(taskscheduleR)\n\n#adicionar configuracao para nao converter os eixos dos valores para notação científica\noptions(scipen = 999)"
  },
  {
    "objectID": "index.html#etl-extract-transform-and-load",
    "href": "index.html#etl-extract-transform-and-load",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "ETL (extract, transform and load)",
    "text": "ETL (extract, transform and load)\nOs dados foram baixados diretamente da API do DataSUS utilizando um script em python obtido no própio site do DataSUS com algumas modificações. as credenciais para acessar os dados via API do Elasticsearch estão disponíveis neste link e precisam ser adicionadas dentro dos scripts. Outra consideração importante nesse tutorial é que os diretórios para os arquivos acessados se referem a máquina onde este tutorial foi contruído. Portanto, é importante alterar esses trechos para a máquina que você utilizará.\n\nNOTA: É importante inserir sua senha de acesso ao elasticsearch (linhas 29 e 30) e colocar dentro do script (linha 44) o caminho absoluto onde será salvo o arquivo .csv com os resultados da busca.\n\n\n\nCode\nsource_python(file = \"C:/Users/ronal/OneDrive/portfoglio/data_sus/SG/arquivos_de_suporte/fetch_sgpe.py\")\n\n\nUma vez que a requisição à API foi concluída, realizamos algumas transformações nos dados e carregamos para um banco de dados postgreSQL utilizando o R:\n\nNOTA: alterar suas credenciais para acessar o banco de dados.\n\n\n\nCode\n#### carregar o arquivo CSV com a resposta da requisição ####\n\nsgpe = fread(\"C:/Users/ronal/Downloads/esus/desc-esus-notifica-estado-pe_total.csv\")\n\n#renomear os nomes das colunas\nsgpe = sgpe %&gt;%\n  rename(timestamp = `@timestamp`) %&gt;%\n  rename(version = `@version`)\nnames(sgpe) = tolower(names(sgpe))\n\n#### criar uma conexão do R com o postgreSQL #####\n\nmy_user = \"postgres\"\nmy_password = \"r&gt;python\" #coloque sua senha aqui\n\ncon &lt;- dbConnect(drv = RPostgres::Postgres(),\n                 dbname=\"postgres\",\n                 host = \"localhost\",\n                 port = 5432,\n                 user = my_user,\n                 password = my_password)\n\n#### transformação dos dados ####\n \n#criar uma chave-primária utilizando o numero da linha\nsgpe = sgpe %&gt;%\n  mutate(entry = rownames(sgpe)) %&gt;%\n  relocate(entry, .before = \"id\")\n\n#criar colunas com ano e mâs de notificação\nsgpe = sgpe %&gt;%\n  mutate(ano_notif = as.numeric(substr(datanotificacao, 1, 4))) %&gt;%\n  mutate(mes_notif = as.numeric(substr(datanotificacao, 6, 7)))\n\n#número de dias dos sintomas até a notificação\nx = interval(as.Date(sgpe$datanotificacao),\n             as.Date(sgpe$datainiciosintomas))\n\nx= abs(x %/% days(1))\n\nsgpe = sgpe %&gt;%\n  mutate(dias_ate_notif = x)\n\nrm(x)\n\n#número de doses\nsgpe = sgpe %&gt;%\n  mutate(n_doses = gsub('\"|\\\\[|\\\\]|\\\\|,',\"\", codigodosesVacina)) %&gt;%\n  mutate(n_doses = gsub(\"'| |,\",\"\", n_doses)) %&gt;%\n  mutate(n_doses = nchar(n_doses))\n\n#avaliar se o desfecho foi covid-19\nsgpe = sgpe %&gt;% \n  mutate(covid = case_when(!classificacaofinal %in% c(\"Síndrome Gripal Não Especificada\",\n                                                      \"Descartado\") ~ \"covid\",\n                           classificacaofinal == \"Síndrome Gripal Não Especificada\" ~ \"SG não especificada\",\n                           classificacaofinal == \"Descartado\" ~ \"descartado\")) %&gt;%\n  mutate(covid = if_else(is.na(classificacaofinal) == TRUE, NA, covid))\n\n#mudar valores vazios para NA em algumas colunas\nsgpe = sgpe %&gt;%\n  mutate(sintomas = na_if(sintomas,\"\")) %&gt;%\n  mutate(condicoes = na_if(condicoes,\"\")) %&gt;%\n  mutate(racacor = na_if(racacor,\"\")) %&gt;%\n  mutate(ano_notif = na_if(ano_notif, 2002)) %&gt;%\n  mutate(evolucaocaso = na_if(evolucaocaso, \"\")) %&gt;%\n  mutate(sexo = na_if(sexo,\"\")) %&gt;%\n  mutate(municipionotificacao = na_if(municipionotificacao,\"\")) %&gt;%\n  mutate(classificacaofinal = na_if(classificacaofinal,\"\")) %&gt;%\n  mutate(datanotificacao = if_else(year(datanotificacao) == 2002, \n                                   NA ,\n                                   datanotificacao))\n\n#### escrever o dataframe transformado para uma tabela no PostgreSQL ####\ndbWriteTable(conn = con,\n             name = \"sgpe\",   \n             value = sgpe,\n             field.types = c(entry = \"SERIAL PRIMARY KEY\"),\n             overwrite = TRUE)\n\n# fechar a conexão\ndbDisconnect(con)\nrm(con)"
  },
  {
    "objectID": "index.html#alimentar-nosso-banco-com-as-novas-atualizações",
    "href": "index.html#alimentar-nosso-banco-com-as-novas-atualizações",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "Alimentar nosso banco com as novas atualizações",
    "text": "Alimentar nosso banco com as novas atualizações\nA seguir, adaptamos os script anteriores para obter as atualizações das notificações e carregar no banco de dados. Na requisição, criamos um modo para extrair do nosso banco de dados a data e hora do último registro (variárvel ‘timestamp’) e passamos esse valor como data e hora inicial em que queremos os registros. A data e hora final é sempre o momento em que a requisição será feita.\n\nNOTA: lembre-se de alterar as credencias de acesso do elasticsearch (linhas 52 e 53), do seu banco de dados PostgreSQL (linhas 17 a 23) e caminho absoluto no script de atualização dos dados com o destino de onde o arquivo .csv será salvo (linha 70).\n\nPrimeiro, obter as atualizações por meio de nova requisição via API:\n\n\nCode\nsource_python(file = \"C:/Users/ronal/OneDrive/portfoglio/data_sus/SG/arquivos_de_suporte/update_sgpe.py\")\n\n\nAgora, realizar as transformações nos dados e carregar os novos registros no nosso database.\n\n\nCode\n#### carregar o arquivo .csv com os novos registros ####\n\nto_update = fread(\"C:/Users/ronal/Downloads/esus/desc-esus-notifica-estado-pe.csv\")\n\n#renomear os nomes das colunas\nto_update = to_update %&gt;%\n  rename(timestamp = `@timestamp`) %&gt;%\n  rename(version = `@version`)\nnames(to_update) = tolower(names(to_update))\n\n#### criar uma conexão do R com o postgreSQL #####\n\nmy_user = \"postgres\"\nmy_password = \"r&gt;python\" #coloque sua senha aqui\n\ncon &lt;- dbConnect(drv = RPostgres::Postgres(),\n                 dbname=\"postgres\",\n                 host = \"localhost\",\n                 port = 5432,\n                 user = my_user,\n                 password = my_password)\n\n#### verificar se as novas entradas já estão presentes no database ####\n\nids = paste0(to_update$id, collapse = \"','\")\n\nquery = paste0(\"SELECT * FROM sgpe WHERE id IN ('\", ids, \"');\")\nresult = dbGetQuery(con, query)\n\nresult = result %&gt;%\n  filter(registroatual == TRUE)\n\n#eliminar das atualizações, as entradas já existentes\n\nto_update = to_update %&gt;%\n  filter(registroatual == TRUE) %&gt;%\n  filter(!id %in% result$id)\n\n#### transformação dos dados e carregamento no nosso database ####\n\n#avaliar se precisa atualizar\nif(nrow(to_update) &gt; 0){\n  \n  #descobrir a última chave primária cadastrada no banco\n  query = paste0(\"SELECT MAX(entry) FROM sgpe;\")\n  result = dbGetQuery(con, query)\n  \n  #adicionando a chave primária e novas colunas\n  to_update = to_update %&gt;%\n    mutate(entry = seq(result$max+1, \n                       result$max+1+nrow(to_update)-1)) %&gt;%\n    relocate(entry, .before = \"id\")\n  \n  to_update = to_update %&gt;%\n    mutate(ano_notif = as.numeric(substr(datanotificacao, 1, 4))) %&gt;%\n    mutate(mes_notif = as.numeric(substr(datanotificacao, 6, 7)))\n  \n  #número de dias dos sintomas até a notificação\n  x = interval(as.Date(to_update$datanotificacao),\n               as.Date(to_update$datainiciosintomas))\n  \n  x= abs(x %/% days(1))\n  \n  to_update = to_update %&gt;%\n    mutate(dias_ate_notif = x)\n  \n  rm(x)\n  \n  #número de doses\n  to_update = to_update %&gt;%\n    mutate(n_doses = gsub('\"|\\\\[|\\\\]|\\\\|,',\"\", codigodosesvacina)) %&gt;%\n    mutate(n_doses = gsub(\"'| |,\",\"\", n_doses)) %&gt;%\n    mutate(n_doses = nchar(n_doses))\n  \n  #avaliar se o desfecho foi covid-19\n  to_update = to_update %&gt;%\n    mutate(covid = case_when(!classificacaofinal %in% c(\"Síndrome Gripal Não Especificada\",\n                                                        \"Descartado\") ~ \"covid\",\n                             classificacaofinal == \"Síndrome Gripal Não Especificada\" ~ \"SG não especificada\",\n                             classificacaofinal == \"Descartado\" ~ \"descartado\")) %&gt;%\n    mutate(covid = if_else(is.na(classificacaofinal) == TRUE, NA, covid))\n  \n  #mudar valores vazios para NA\n  to_update = to_update %&gt;%\n    mutate(sintomas = if_else(sintomas == \"\", NA, sintomas)) %&gt;%\n    mutate(condicoes = if_else(condicoes == \"\", NA, condicoes)) %&gt;%\n    mutate(racacor = if_else(racacor == \"\", NA, racacor)) %&gt;%\n    mutate(ano_notif = na_if(ano_notif, 2002)) %&gt;% \n    mutate(evolucaocaso = if_else(evolucaocaso == \"\", NA, evolucaocaso)) %&gt;%\n    mutate(sexo = if_else(sexo == \"\", NA, sexo)) %&gt;%\n    mutate(municipionotificacao = if_else(municipionotificacao == \"\", NA, municipionotificacao)) %&gt;%\n    mutate(classificacaofinal = if_else(classificacaofinal == \"\", NA, classificacaofinal)) %&gt;%\n    mutate(datanotificacao = if_else(year(datanotificacao) == 2002, \n                                     NA ,\n                                     datanotificacao))\n\n  #carregar o dataframe para nossa tabela no PostgreSQL\n  dbWriteTable(conn = con,\n               name = \"sgpe\",   \n               value = to_update,\n               append = TRUE, \n               row.names = FALSE)\n  \n  #encerrar a conexão\n  dbDisconnect(con)\n  rm(con) \n} else {\n  \n  #encerrar a conexão\n  dbDisconnect(con)\n  rm(con) \n  \n  print(\"não precisa atualizar!\")\n  \n}"
  },
  {
    "objectID": "index.html#criando-uma-rotina-no-r-para-executar-a-atualização-a-cada-hora",
    "href": "index.html#criando-uma-rotina-no-r-para-executar-a-atualização-a-cada-hora",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "Criando uma rotina no R para executar a atualização a cada hora",
    "text": "Criando uma rotina no R para executar a atualização a cada hora\nComo a atualização nas notificações é feita de modo contínuo, criamos uma rotina para excutar o script python para baixar as novas notificações e o script R para tratar os dados e carregar no database. Utilizamos o pacote ‘taskscheduleR’. Vale salientar que esse pacote funciona apenas para agendamento de tarefas no Windows. Para MacOS e Linux, é necessário utlizar o pacote ‘cronR’. Este tutorial é bastante útil sobre como usar esse pacotes.\n\nNOTA: é importante utilizar os caminhos absolutos dos arquivo python de atualização dos registros e do arquivo .csv onde a requisição à API será salva.\n\n\n\nCode\nscript = \"C:/Users/ronal/OneDrive/portfoglio/data_sus/SG/arquivos_de_suporte/transfer_to_db.R\"\n\ntaskscheduler_create(taskname  = \"atualizar_sgpe\", \n                     rscript   = script,\n                     schedule  = \"HOURLY\", \n                     starttime = \"08:50\")\n\n#para apagar a rotina\n#taskscheduler_delete(taskname = \"atualizar_sgpe\")\n\n\nPara confirmar que a automação está funcionando, basta realizarmos a busca pela variável ‘entry’ mais recente dentro do pgAdmin:\n\n\n\n\n\n\nFigure 1: Antes\n\n\n\n\n\n\n\nFigure 2: Depois"
  },
  {
    "objectID": "nao_upar/0_PyScript_Extracao_OpenDatasus-Atualizado-24012023.html",
    "href": "nao_upar/0_PyScript_Extracao_OpenDatasus-Atualizado-24012023.html",
    "title": "1) Acessar via Python a totalidade dos dados eSUS Notifica",
    "section": "",
    "text": "#!pip install elasticsearch7==7.13.1\n## Utilizar essa versão da biblioteca elasticsearch\n##na versão 8 foi modificada a estrutra do arquivo é não funciona com o script no formato atual\n\n\nimport time\nimport pandas as pd\nfrom elasticsearch7 import Elasticsearch\nimport elasticsearch7.helpers\nimport csv\nimport io\nfrom datetime import datetime\n\n#variáveis atualizadas com as disponiveis na API do OpenDatasus em 24/01/2023\ncolumns = ['id', 'dataNotificacao', 'sexo', 'racaCor', 'estado','estadoIBGE', 'municipio', 'municipioIBGE', \n           'estadoNotificacao', 'estadoNotificacaoIBGE', 'municipioNotificacao', 'municipioNotificacaoIBGE', \n           'sintomas', 'outrosSintomas', 'dataInicioSintomas', 'dataEncerramento', 'evolucaoCaso', 'classificacaoFinal',\n           'resultadoTeste', 'codigoTriagemPopulacaoEspecifica', 'resultadoTesteSorologicoIgG', 'outrasCondicoes', \n           'idade', 'loteSegundaReforcoDose', 'profissionalSaude', 'tipoTeste', 'resultadoTesteSorologicoIgM', \n           'resultadoTesteSorologicoTotais', 'qualAntiviral', 'codigoContemComunidadeTradicional', '@version', \n           'dataTesteSorologico', 'estrangeiro', 'idCollection', 'codigoDosesVacina', 'codigoLocalRealizacaoTestagem',  \n           'laboratorioSegundaReforcoDose', 'dataSegundaDose', 'codigoEstrategiaCovid', 'dataSegundaReforcoDose', \n           'codigoRecebeuAntiviral', 'outroTriagemPopulacaoEspecifica', '@timestamp',  'outroBuscaAtivaAssintomatico', \n           'codigoBuscaAtivaAssintomatico', 'recebeuAntiviral', 'codigoRecebeuVacina', 'dataReforcoDose', \n           'tipoTesteSorologico', 'dataInicioTratamento', 'cbo', 'registroAtual', 'dataPrimeiraDose', 'condicoes', \n           'dataTeste', 'outroAntiviral', 'estadoTeste', 'codigoQualAntiviral', 'outroLocalRealizacaoTestagem']\n\nprint(\"--------------------------------------------------------------\")\n\nuser = 'user-public-notificacoes'\npwd = 'Za4qNXdyQNSa9YaA'\nindex = 'desc-esus-notifica-estado-pe'\nprint(index)\nprint('Início: ' + index)\nprotocol = 'https'\nurl = protocol + '://' + user + ':' + pwd +'@elasticsearch-saps.saude.gov.br' + '/'\nes = Elasticsearch([url], send_get_body_as='POST', timeout=2000)\n#print(url)\n\n#opções de consulta, todos os dados ou por data\n#body={\"query\": {\"match_all\": {}}}\n#data_2020={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataNotificacao\": {\"gte\": \"2020-01-01T00:00:00\", \"lte\": \"2020-12-31T23:59:59\"}}}}}}\n#data_2021={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataNotificacao\": {\"gte\": \"2021-01-01T00:00:00\", \"lte\": \"2021-12-31T23:59:59\"}}}}}}\n#data_2021_1sem={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataInicioSintomas\": {\"gte\": \"2021-01-01T00:00:00\", \"lte\": \"2021-06-30T23:59:59\"}}}}}}\n#data_2021_2sem={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataInicioSintomas\": {\"gte\": \"2021-07-01T00:00:00\", \"lte\": \"2021-12-31T23:59:59\"}}}}}}\n#data_2022={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataInicioSintomas\": {\"gte\": \"2022-01-01T00:00:00\", \"lte\": \"now\"}}}}}}\n#data_2023={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataInicioSintomas\": {\"gte\": \"2023-01-01T00:00:00\", \"lte\": \"now\"}}}}}}\ndata_total={\"query\": {\"bool\": {\"must\": {\"match_all\": {}}, \"filter\": { \"range\": {\"dataInicioSintomas\": {\"gte\": \"2019-01-01T00:00:00\", \"lte\": \"now\"}}}}}}\n\n\n#mudar no campo abaixo utilizando uma das tres opções acima no atributo query.\n#a opção body traz todos os dados do inicio até a data atual\n#a opção data_2020 traz todos os registros com o campo '_updated_at' com data entre 01/01/2020 a 31/12/2020\n#a opção data_2021 traz todos os registros com o campo '_updated_at' com data entre 01/01/2021 até a data atual\n#mudar aqui pra consulta desejada\nresults = elasticsearch7.helpers.scan(es, query=data_total, index=index)\n\n#start_time = datetime.now()\n\n#Recomendado a criação de um diretório chamado esus na pasta C:/ ou ajuste como preferir\nwith io.open('/home/patgen/Downloads/esus/'+ index + '.csv', \"w\", encoding=\"utf-8\", newline='') as csv_file:\n    writer = csv.DictWriter(csv_file, fieldnames=columns, delimiter=';', extrasaction='ignore')\n    writer.writeheader()\n    #mid_time = datetime.now()\n    i = 0\n    printVal = 5000\n    for document in results:\n        writer.writerow(document['_source'])\n        i += 1\n        #horafor =  datetime.now()\n        #if ((i % printVal) == 0) and (i &gt;= printVal):\n        #    print(\"registros escritos: \", i, \" \", horafor)\n#end_time = datetime.now()\n#print('Tempo Gravação: {}'.format(end_time - start_time))\n\nprint(\"Numero de casos:\",i,\"de\",es.count(index=index)['count'])\nprint(\"Final: \" + index)\n\nprint(\"Finished here!\")"
  },
  {
    "objectID": "index.html#dashboard-no-power-bi",
    "href": "index.html#dashboard-no-power-bi",
    "title": "Síndrome Gripal (SG) em Pernambuco: um painel de vigilância",
    "section": "Dashboard no Power BI",
    "text": "Dashboard no Power BI\n\n\nAlgumas limitações:\n\nNesta versão do report, estou rodando no meu próprio computador. Em breve, irei mover o database para o Azure ou algum outro servidor;\nComo a conexão será on premise, é necessário baixar e configurar um gateway para que o Power BI se comunique com a máquina. Eu utilizei o gateway do modo padrão.\nPara máquinas em que o database está no Windows (meu caso, atualmente), é necessário que o postgreSQL esteja instalado com o driver npsql 4.0.10, ou superior, para que o Power BI se comunique com o database.\nNossa licença atual do Powe BI (Pro) só permite até oito atualizações diárias dos dados. Assim, apesar do banco de dados ser atualizado de hora em hora, as alterações só serão visíveis no Power BI a cada três horas, contando a partir da meia-noite."
  },
  {
    "objectID": "srag.html",
    "href": "srag.html",
    "title": "Painel covid-19 em PE",
    "section": "",
    "text": "Com um processo de atualização mais lento que os dados de SG, o painel coronavirus do Governo do Brasil traz os dados consolidados de novos casos e óbitos por covid-19 no Brasil, segmentado por Região e Estado. Como não há um ftp disponível para essa base de dados, utilizamos técnicas básicas de web scraping para obter os valores, inserir em um banco de dados local e gerar as visualizações no Power BI."
  },
  {
    "objectID": "srag.html#dados-da-srag-através-do-painel-coronavirus-do-governo",
    "href": "srag.html#dados-da-srag-através-do-painel-coronavirus-do-governo",
    "title": "Painel covid-19 em PE",
    "section": "",
    "text": "Com um processo de atualização mais lento que os dados de SG, o painel coronavirus do Governo do Brasil traz os dados consolidados de novos casos e óbitos por covid-19 no Brasil, segmentado por Região e Estado. Como não há um ftp disponível para essa base de dados, utilizamos técnicas básicas de web scraping para obter os valores, inserir em um banco de dados local e gerar as visualizações no Power BI."
  },
  {
    "objectID": "srag.html#carregamento-dos-pacotes",
    "href": "srag.html#carregamento-dos-pacotes",
    "title": "Painel covid-19 em PE",
    "section": "Carregamento dos pacotes",
    "text": "Carregamento dos pacotes\n\n\nCode\nlibrary(RSelenium)\nlibrary(netstat)\nlibrary(data.table)\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RPostgres)"
  },
  {
    "objectID": "srag.html#iniciar-o-servidor-selenium",
    "href": "srag.html#iniciar-o-servidor-selenium",
    "title": "Painel covid-19 em PE",
    "section": "Iniciar o servidor selenium",
    "text": "Iniciar o servidor selenium\n\n\nCode\n#iniciar o servidor no firefox\nrs_driver_object = rsDriver(browser = \"firefox\",\n                            verbose = FALSE,\n                            port = free_port())\n\n#criar um cliente\nremDr = rs_driver_object$client"
  },
  {
    "objectID": "srag.html#baixar-os-dados",
    "href": "srag.html#baixar-os-dados",
    "title": "Painel covid-19 em PE",
    "section": "Baixar os dados",
    "text": "Baixar os dados\n\n\nCode\n#entrar no site\nremDr$navigate(\"https://covid.saude.gov.br/\")\n\n#atraves no navegador, utilizar a funcao de inspecionar elemento e copiar a xpath\n\n#acessar o botão de download\nbotao_baixar_csv = remDr$findElement(using = \"xpath\", \n                                     value = \"/html/body/app-root/ion-app/ion-router-outlet/app-home/ion-content/div[1]/div[2]/ion-button\")\n\n#confitmar que o botao é o correto\nbotao_baixar_csv$getElementAttribute(\"class\")\n\n#clicar para baixar\nbotao_baixar_csv$clickElement()\n\n#desconectar do servidor\nsystem(\"taskkill /im java.exe /f\")\nrm(botao_baixar_csv, remDr, rs_driver_object)"
  },
  {
    "objectID": "srag.html#abrir-os-arquivos",
    "href": "srag.html#abrir-os-arquivos",
    "title": "Painel covid-19 em PE",
    "section": "Abrir os arquivos",
    "text": "Abrir os arquivos\n\n\nCode\n#descomprimir os arquivos\nsetwd(\"C:/Users/ronal/Downloads/HIST_PAINEL_COVIDBR_30dez2023\")\n\n\nfor(i in 1:length(\n  list.files(path = \"C:/Users/ronal/Downloads/HIST_PAINEL_COVIDBR_30dez2023\"))) {\n  assign(paste0(\"file\",i),\n         fread(list.files(\n           path = \"C:/Users/ronal/Downloads/HIST_PAINEL_COVIDBR_30dez2023\")[i]),\n         .GlobalEnv)\n}\nrm(i)\n\n#concatenar dataframes\ncovidbr = eval(parse(text = \n  paste0(\"bind_rows(\",paste0(ls(pattern = \"^file\"), collapse = \",\"),\")\")\n))\nrm(list = ls(pattern = \"^file\"))\n\ncovidbr = covidbr %&gt;%\n  mutate(across(c(estado, municipio, nomeRegiaoSaude), na_if, \"\"))\n\ncovidpe = covidbr %&gt;%\n  filter(estado == \"PE\")"
  },
  {
    "objectID": "srag.html#adicionar-em-uma-tabela-no-database-postgresql",
    "href": "srag.html#adicionar-em-uma-tabela-no-database-postgresql",
    "title": "Painel covid-19 em PE",
    "section": "Adicionar em uma tabela no database PostgreSQL",
    "text": "Adicionar em uma tabela no database PostgreSQL\n\n\nCode\n#criar uma conexão do R com o postgreSQL\n\nmy_user = \"postgres\"\nmy_password = \"r&gt;python\" #coloque sua senha aqui\n\ncon &lt;- dbConnect(drv = RPostgres::Postgres(),\n                 dbname=\"postgres\",\n                 host = \"localhost\",\n                 port = 5432,\n                 user = my_user,\n                 password = my_password)\n\n#escrever o dataframe transformado para uma tabela no PostgreSQL\ndbWriteTable(conn = con,\n             name = \"covidbr\",   \n             value = covidbr,\n             overwrite = TRUE)\n\n# fechar a conexão\ndbDisconnect(con)\nrm(con, my_password, my_user)"
  },
  {
    "objectID": "covidbr.html",
    "href": "covidbr.html",
    "title": "Painel covid-19 em PE",
    "section": "",
    "text": "Com um processo de atualização mais lento que os dados de SG, o Painel Coronavirus do Governo do Brasil traz os dados consolidados de novos casos e óbitos por covid-19 no Brasil, segmentado por Região e Estado. Como não há um ftp disponível para essa base de dados, utilizamos técnicas básicas de web scraping para obter os valores, inserir em um banco de dados local e gerar as visualizações no Power BI."
  },
  {
    "objectID": "covidbr.html#dados-da-srag-através-do-painel-coronavirus-do-governo",
    "href": "covidbr.html#dados-da-srag-através-do-painel-coronavirus-do-governo",
    "title": "Painel covid-19 em PE",
    "section": "",
    "text": "Com um processo de atualização mais lento que os dados de SG, o Painel Coronavirus do Governo do Brasil traz os dados consolidados de novos casos e óbitos por covid-19 no Brasil, segmentado por Região e Estado. Como não há um ftp disponível para essa base de dados, utilizamos técnicas básicas de web scraping para obter os valores, inserir em um banco de dados local e gerar as visualizações no Power BI."
  },
  {
    "objectID": "covidbr.html#carregamento-dos-pacotes",
    "href": "covidbr.html#carregamento-dos-pacotes",
    "title": "Painel covid-19 em PE",
    "section": "Carregamento dos pacotes",
    "text": "Carregamento dos pacotes\n\n\nCode\nlibrary(RSelenium)\nlibrary(netstat)\nlibrary(data.table)\nlibrary(tidyverse)\nlibrary(DBI)\nlibrary(RPostgres)"
  },
  {
    "objectID": "covidbr.html#iniciar-o-servidor-selenium",
    "href": "covidbr.html#iniciar-o-servidor-selenium",
    "title": "Painel covid-19 em PE",
    "section": "Iniciar o servidor selenium",
    "text": "Iniciar o servidor selenium\n\n\nCode\n#iniciar o servidor no firefox\nrs_driver_object = rsDriver(browser = \"firefox\",\n                            verbose = FALSE,\n                            port = free_port())\n\n#criar um cliente\nremDr = rs_driver_object$client"
  },
  {
    "objectID": "covidbr.html#baixar-os-dados",
    "href": "covidbr.html#baixar-os-dados",
    "title": "Painel covid-19 em PE",
    "section": "Baixar os dados",
    "text": "Baixar os dados\n\n\nCode\n#entrar no site\nremDr$navigate(\"https://covid.saude.gov.br/\")\n\n#atraves no navegador, utilizar a funcao de inspecionar elemento e copiar a xpath\n\n#acessar o botão de download\nbotao_baixar_csv = remDr$findElement(using = \"xpath\", \n                                     value = \"/html/body/app-root/ion-app/ion-router-outlet/app-home/ion-content/div[1]/div[2]/ion-button\")\n\n#confitmar que o botao é o correto\nbotao_baixar_csv$getElementAttribute(\"class\")\n\n#clicar para baixar\nbotao_baixar_csv$clickElement()\n\n#desconectar do servidor\nsystem(\"taskkill /im java.exe /f\")\nrm(botao_baixar_csv, remDr, rs_driver_object)"
  },
  {
    "objectID": "covidbr.html#abrir-os-arquivos",
    "href": "covidbr.html#abrir-os-arquivos",
    "title": "Painel covid-19 em PE",
    "section": "Abrir os arquivos",
    "text": "Abrir os arquivos\n\n\nCode\n#descomprimir os arquivos\nsetwd(\"C:/Users/ronal/Downloads/HIST_PAINEL_COVIDBR_30dez2023\")\n\n\nfor(i in 1:length(\n  list.files(path = \"C:/Users/ronal/Downloads/HIST_PAINEL_COVIDBR_30dez2023\"))) {\n  assign(paste0(\"file\",i),\n         fread(list.files(\n           path = \"C:/Users/ronal/Downloads/HIST_PAINEL_COVIDBR_30dez2023\")[i]),\n         .GlobalEnv)\n}\nrm(i)\n\n#concatenar dataframes\ncovidbr = eval(parse(text = \n  paste0(\"bind_rows(\",paste0(ls(pattern = \"^file\"), collapse = \",\"),\")\")\n))\nrm(list = ls(pattern = \"^file\"))\n\ncovidbr = covidbr %&gt;%\n  mutate(across(c(estado, municipio, nomeRegiaoSaude), na_if, \"\"))\n\ncovidpe = covidbr %&gt;%\n  filter(estado == \"PE\")"
  },
  {
    "objectID": "covidbr.html#adicionar-em-uma-tabela-no-database-postgresql",
    "href": "covidbr.html#adicionar-em-uma-tabela-no-database-postgresql",
    "title": "Painel covid-19 em PE",
    "section": "Adicionar em uma tabela no database PostgreSQL",
    "text": "Adicionar em uma tabela no database PostgreSQL\n\n\nCode\n#criar uma conexão do R com o postgreSQL\n\nmy_user = \"postgres\"\nmy_password = \"r&gt;python\" #coloque sua senha aqui\n\ncon &lt;- dbConnect(drv = RPostgres::Postgres(),\n                 dbname=\"postgres\",\n                 host = \"localhost\",\n                 port = 5432,\n                 user = my_user,\n                 password = my_password)\n\n#escrever o dataframe transformado para uma tabela no PostgreSQL\ndbWriteTable(conn = con,\n             name = \"covidbr\",   \n             value = covidbr,\n             overwrite = TRUE)\n\n# fechar a conexão\ndbDisconnect(con)\nrm(con, my_password, my_user)"
  }
]